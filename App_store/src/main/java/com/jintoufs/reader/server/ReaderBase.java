/**
 * ????? ??ReaderMethod.java
 * CopyRright (c) 2008-xxxx:
 * ???????2014-03-12_001
 * ???????Jie Zhu
 * ?????2014/03/12
 * ??????Jie Zhu
 * ?????2014/03/12
 * ??????????汾
 * ?汾??1.0.0
 */

package com.jintoufs.reader.server;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Arrays;

import com.jintoufs.reader.CMD;
import com.jintoufs.reader.HEAD;
import com.jintoufs.reader.MessageTran;

public abstract class ReaderBase {
	private WaitThread mWaitThread = null;
	private InputStream mInStream = null;
	private OutputStream mOutStream = null;

	/**
	 * ????????
	 */
	public abstract void onLostConnect();

	/**
	 * ????д??????????????????????????????
	 *
	 * @param msgTran
	 *            ?????????
	 */
	public abstract void analyData(MessageTran msgTran);

	// ???δ?????????????????????????????
	private byte[] m_btAryBuffer = new byte[4096];
	// ???δ???????????Ч????
	private int m_nLength = 0;

	/**
	 * ???ι???????????????????????????Reader??
	 *
	 * @param in
	 *            ??????
	 * @param out
	 *            ?????
	 */
	public ReaderBase(InputStream in, OutputStream out) {
		this.mInStream = in;
		this.mOutStream = out;

		//StartWait();
	}

	public boolean IsAlive() {
		return mWaitThread != null && mWaitThread.isAlive();
	}

	public void StartWait() {
		mWaitThread = new WaitThread();
		mWaitThread.start();
	}

	/**
	 * ???????????????
	 *
	 * @author Jie
	 */
	private class WaitThread extends Thread {
		private boolean mShouldRunning = true;

		public WaitThread() {
			mShouldRunning = true;
		}

		@Override
		public void run() {
			byte[] btAryBuffer = new byte[4096];
			while (mShouldRunning) {
				try {
					//Loger.disk_log("???????", "read????????????????", "M10_U8");
					int nLenRead = mInStream.read(btAryBuffer);
					//Loger.disk_log("Read", StringTool.byteArrayToString(btAryBuffer, 0, btAryBuffer.length), "M10_U8");
					if (nLenRead > 0) {
						byte[] btAryReceiveData = new byte[nLenRead];
						System.arraycopy(btAryBuffer, 0, btAryReceiveData, 0,
								nLenRead);

						runReceiveDataCallback(btAryReceiveData);
					}
				} catch (IOException e) {
					//Loger.disk_log("??????", "e="+e.getMessage()+"\r\n"+e.getStackTrace(), "M10_U8");

					onLostConnect();
					return;
				} catch (Exception e) {
					//Loger.disk_log("??????", "e="+e.getMessage()+"\r\n"+e.getStackTrace(), "M10_U8");

					onLostConnect();
					return;
				}
			}
		}

		public void signOut() {
			mShouldRunning = false;
			interrupt();
		}
	};

	/**
	 * ???????????
	 */
	public final void signOut() {
		mWaitThread.signOut();
		try {
			mInStream.close();
			mOutStream.close();

		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public final void clearBuffer(){
		//m_btAryBuffer=new byte[4096];
		//m_nLength=0;
	}

	/**
	 * ??????????????????????????
	 *
	 * @param btAryReceiveData
	 *            ???????????
	 */
	private void runReceiveDataCallback(byte[] btAryReceiveData) {
		//Loger.disk_log("Read", StringTool.byteArrayToString(btAryReceiveData, 0, btAryReceiveData.length), "M10_U8");
		try {
			reciveData(btAryReceiveData);

			int nCount = btAryReceiveData.length;
			byte[] btAryBuffer = new byte[nCount + m_nLength];

			System.arraycopy(m_btAryBuffer, 0, btAryBuffer, 0, m_nLength);
			System.arraycopy(btAryReceiveData, 0, btAryBuffer, m_nLength,
					btAryReceiveData.length);
			// Array.Copy(m_btAryBuffer, btAryBuffer, m_nLenth);
			// Array.Copy(btAryReceiveData, 0, btAryBuffer, m_nLenth,
			// btAryReceiveData.Length);

			// ???????????????0xA0??????????Э?????????????????????
			int nIndex = 0; // ???????д???A0????????????????
			int nMarkIndex = 0; // ???????в?????A0???nMarkIndex?????????????????
			for (int nLoop = 0; nLoop < btAryBuffer.length; nLoop++) {
				if (btAryBuffer.length > nLoop + 1) {
					if (btAryBuffer[nLoop] == HEAD.HEAD) {
						int nLen = btAryBuffer[nLoop + 1] & 0xFF;
						if (nLoop + 1 + nLen < btAryBuffer.length) {
							byte[] btAryAnaly = new byte[nLen + 2];
							System.arraycopy(btAryBuffer, nLoop, btAryAnaly, 0,
									nLen + 2);
							// Array.Copy(btAryBuffer, nLoop, btAryAnaly, 0,
							// nLen + 2);

							MessageTran msgTran = new MessageTran(btAryAnaly);
							analyData(msgTran);

							nLoop += 1 + nLen;
							nIndex = nLoop + 1;
						} else {
							nLoop += 1 + nLen;
						}
					} else {
						nMarkIndex = nLoop;
					}
				}
			}

			if (nIndex < nMarkIndex) {
				nIndex = nMarkIndex + 1;
			}

			if (nIndex < btAryBuffer.length) {
				m_nLength = btAryBuffer.length - nIndex;
				Arrays.fill(m_btAryBuffer, 0, 4096, (byte) 0);
				System.arraycopy(btAryBuffer, nIndex, m_btAryBuffer, 0,
						btAryBuffer.length - nIndex);
				// Array.Clear(m_btAryBuffer, 0, 4096);
				// Array.Copy(btAryBuffer, nIndex, m_btAryBuffer, 0,
				// btAryBuffer.Length - nIndex);
			} else {
				m_nLength = 0;
			}
		} catch (Exception e) {

		}
	}

	/**
	 * ????д???????????????????????????
	 *
	 * @param btAryReceiveData
	 *            ?????????
	 */
	public void reciveData(byte[] btAryReceiveData) {
	};

	/**
	 * ????д?????????????????????????
	 *
	 * @param btArySendData
	 *            ?????????
	 */
	public void sendData(byte[] btArySendData) {
	};

	/**
	 * ????????????synchronized()?????????????
	 *
	 * @param btArySenderData
	 *            ??????????
	 * @return ??? :0, ???:-1
	 */
	private int sendMessage(byte[] btArySenderData) {

		try {
			synchronized (mOutStream) { // ???????
				//Loger.disk_log("Write", StringTool.byteArrayToString(btArySenderData, 0, btArySenderData.length), "M10_U8");
				mOutStream.write(btArySenderData);
				//Loger.disk_log("???????", "write??"+StringTool.byteArrayToString(btArySenderData, 0, btArySenderData.length), "M10_U8");
			}
		} catch (IOException e) {

			//Loger.disk_log("д????", "e="+e.getMessage()+"\r\n"+e.getStackTrace(), "M10_U8");
			onLostConnect();
			return -1;
		} catch (Exception e) {
			///Loger.disk_log("д????", "e="+e.getMessage()+"\r\n"+e.getStackTrace(), "M10_U8");

			return -1;
		}

		sendData(btArySenderData);

		return 0;
	}

	private int sendMessage(byte btReadId, byte btCmd) {
		MessageTran msgTran = new MessageTran(btReadId, btCmd);

		return sendMessage(msgTran.getAryTranData());
	}

	private int sendMessage(byte btReadId, byte btCmd, byte[] btAryData) {
		MessageTran msgTran = new MessageTran(btReadId, btCmd, btAryData);

		return sendMessage(msgTran.getAryTranData());
	}

	/**
	 * ??λ?????????д????
	 *
	 * @param btReadId
	 *            ??д?????(0xFF??????)
	 * @return ??? :0, ???:-1
	 */
	public final int reset(byte btReadId) {

		byte btCmd = CMD.RESET;

		int nResult = sendMessage(btReadId, btCmd);

		return nResult;
	}

	/**
	 * ????????????????
	 *
	 * @param btReadId
	 *            ??д?????(0xFF??????)
	 * @param nIndexBaudrate
	 *            ??????(0x03: 38400bps, 0x04:115200 bps)
	 * @return ??? :0, ???:-1
	 */
	public final int setUartBaudrate(byte btReadId, byte nIndexBaudrate) {
		byte btCmd = CMD.SET_UART_BAUDRATE;
		byte[] btAryData = new byte[1];

		btAryData[0] = nIndexBaudrate;

		int nResult = sendMessage(btReadId, btCmd, btAryData);

		return nResult;
	}

	/**
	 * ?????д??????汾??
	 *
	 * @param btReadId
	 *            ??д?????(0xFF??????)
	 * @return ??? :0, ???:-1
	 */
	public final int getFirmwareVersion(byte btReadId) {
		byte btCmd = CMD.GET_FIRMWARE_VERSION;

		int nResult = sendMessage(btReadId, btCmd);

		return nResult;
	}

	/**
	 * ?????д???????
	 *
	 * @param btReadId
	 *            ???д?????(0xFF??????)
	 * @param btNewReadId
	 *            ???д?????,????Χ0-254(0x00?C0xFE)
	 * @return ??? :0, ???:-1
	 */
	public final int setReaderAddress(byte btReadId, byte btNewReadId) {
		byte btCmd = CMD.SET_READER_ADDRESS;
		byte[] btAryData = new byte[1];

		btAryData[0] = btNewReadId;


		int nResult = sendMessage(btReadId, btCmd, btAryData);

		return nResult;
	}

	/**
	 * ?????д???????????
	 *
	 * @param btReadId
	 *            ??д?????(0xFF??????)
	 * @param btWorkAntenna
	 *            ?????(0x00:????1, 0x01:????2, 0x02:????3, 0x03:????4)
	 * @return ??? :0, ???:-1
	 */
	public final int setWorkAntenna(byte btReadId, byte btWorkAntenna) {
		byte btCmd = CMD.SET_WORK_ANTENNA;
		byte[] btAryData = new byte[1];

		btAryData[0] = btWorkAntenna;

		int nResult = sendMessage(btReadId, btCmd, btAryData);

		return nResult;
	}

	/**
	 * ??????????????????
	 *
	 * @param btReadId
	 *            ??д?????(0xFF??????)
	 * @return ??? :0, ???:-1
	 */
	public final int getWorkAntenna(byte btReadId) {
		byte btCmd = CMD.GET_WORK_ANTENNA;

		int nResult = sendMessage(btReadId, btCmd);

		return nResult;
	}

	/**
	 * ?????д????????????(???1)?? <br>
	 * ???????????????100mS?? <br>
	 * ??????????????????????????????CmdCode_set_temporary_output_power????????????Flash???????????
	 *
	 * @param btReadId
	 *            ??д?????(0xFF??????)
	 * @param btOutputPower
	 *            RF???????,????Χ0-33(0x00?C0x21), ??λdBm
	 * @return ??? :0, ???:-1
	 */
	public final int setOutputPower(byte btReadId, byte btOutputPower) {
		byte btCmd = CMD.SET_OUTPUT_POWER;
		byte[] btAryData = new byte[1];

		btAryData[0] = btOutputPower;

		int nResult = sendMessage(btReadId, btCmd, btAryData);

		return nResult;
	}

	/**
	 * ?????д????????????(???2)?? <br>
	 * ???????????????100mS?? <br>
	 * ??????????????????????????????CmdCode_set_temporary_output_power????????????Flash???????????
	 *
	 * @param btReadId
	 *            ??д?????(0xFF??????)
	 * @param btPower1
	 *            RF????1???????,????Χ0-33(0x00?C0x21), ??λdBm
	 * @param btPower2
	 *            RF????2???????,????Χ0-33(0x00?C0x21), ??λdBm
	 * @param btPower3
	 *            RF????3???????,????Χ0-33(0x00?C0x21), ??λdBm
	 * @param btPower4
	 *            RF????4???????,????Χ0-33(0x00?C0x21), ??λdBm
	 * @return ??? :0, ???:-1
	 */
	public final int setOutputPower(byte btReadId, byte btPower1,
									byte btPower2, byte btPower3, byte btPower4) {
		byte btCmd = CMD.SET_OUTPUT_POWER;
		byte[] btAryData = new byte[4];

		btAryData[0] = btPower1;
		btAryData[1] = btPower2;
		btAryData[2] = btPower3;
		btAryData[3] = btPower4;

		int nResult = sendMessage(btReadId, btCmd, btAryData);

		return nResult;
	}

	/**
	 * ?????д?????????????
	 *
	 * @param btReadId
	 *            ??д?????(0xFF??????)
	 * @return ??? :0, ???:-1
	 */
	public final int getOutputPower(byte btReadId) {
		byte btCmd = CMD.GET_OUTPUT_POWER;

		int nResult = sendMessage(btReadId, btCmd);

		return nResult;
	}


	/**
	 * ???÷????????? <br>
	 * ????????????????????????????????????????????????????????????????(???????)?????????????????????????á?
	 *
	 * @param btReadId
	 *            ??д?????(0xFF??????)
	 * @param btMode
	 *            ????????????????(0x00:????, 0x01:???????????, 0x02:??????????????)
	 * @return ??? :0, ???:-1
	 */
	public final int setBeeperMode(byte btReadId, byte btMode) {
		byte btCmd = CMD.SET_BEEPER_MODE;
		byte[] btAryData = new byte[1];

		btAryData[0] = btMode;

		int nResult = sendMessage(btReadId, btCmd, btAryData);

		return nResult;
	}

	/**
	 * ???????豸?????????
	 *
	 * @param btReadId
	 *            ??д?????(0xFF??????)
	 * @return ??? :0, ???:-1
	 */
	public final int getReaderTemperature(byte btReadId) {
		byte btCmd = CMD.GET_READER_TEMPERATURE;

		int nResult = sendMessage(btReadId, btCmd);

		return nResult;
	}


	/**
	 * ????????????????????
	 *
	 * @param btReadId
	 *            ??д?????(0xFF??????)
	 * @param btDetectorStatus
	 *            ??(0x00:?????????????, ?????:?????????????????(?????????),??λdB.
	 *            ?????????迹?????????
	 * @return ??? :0, ???:-1
	 */
	public final int setAntConnectionDetector(byte btReadId,
											  byte btDetectorStatus) {
		byte btCmd = CMD.SET_ANT_CONNECTION_DETECTOR;
		byte[] btAryData = new byte[1];

		btAryData[0] = btDetectorStatus;

		int nResult = sendMessage(btReadId, btCmd, btAryData);

		return nResult;
	}

	/**
	 * ???????????????????
	 *
	 * @param btReadId
	 *            ??д?????(0xFF??????)
	 * @return ??? :0, ???:-1
	 */
	public final int getAntConnectionDetector(byte btReadId) {
		byte btCmd = CMD.GET_ANT_CONNECTION_DETECTOR;

		int nResult = sendMessage(btReadId, btCmd);

		return nResult;
	}

	/**
	 * ?????д???????????????? <br>
	 * ??????????????????????????????????Flash?У??????????????????????????????Flash?б???????????????????????????????
	 * ?????дFlash??????????Flash??????????????????????л??????????????á?
	 *
	 * @param btReadId
	 *            ??д?????(0xFF??????)
	 * @param btRfPower
	 *            RF???????, ????Χ20-33(0x14?C0x21), ??λdBm
	 * @return ??? :0, ???:-1
	 */
	public final int setTemporaryOutputPower(byte btReadId, byte btRfPower) {
		byte btCmd = CMD.SET_TEMPORARY_OUTPUT_POWER;
		byte[] btAryData = new byte[1];

		btAryData[0] = btRfPower;

		int nResult = sendMessage(btReadId, btCmd, btAryData);

		return nResult;
	}

	/**
	 * ??????? <br>
	 * ??д??????????????ж??????????????????????д?????????? <br>
	 * ??? <br>
	 * ?????????ó?255(0xFF)???????????????????????????????????????????????Ч?????????????????
	 * ????????????????????????????á?
	 *
	 * @param btReadId
	 *            ??д?????(0xFF??????)
	 * @param btRepeat
	 *            ??????????????, Repeat=0xFF??????????????????.
	 *            ????????????????????,??????????????30-50mS. ??????????????????????????????????????
	 * @return ??? :0, ???:-1
	 */
	public final int inventory(byte btReadId, byte btRepeat) {
		byte btCmd = CMD.INVENTORY;
		byte[] btAryData = new byte[1];

		btAryData[0] = btRepeat;

		int nResult = sendMessage(btReadId, btCmd, btAryData);

		return nResult;
	}

	/**
	 * ??????? <br>
	 * ??? <br>
	 * ?????EPC?????????????????????????????????????
	 *
	 * @param btReadId
	 *            ??д?????(0xFF??????)
	 * @param btMemBank
	 *            ?????????(0x00:RESERVED, 0x01:EPC, 0x02:TID, 0x03:USER)
	 * @param btWordAdd
	 *            ???????????,????Χ??ο???????
	 * @param btWordCnt
	 *            ??????????,???,WORD(16 bits)????. ????Χ??ο?????????
	 * @param btAryPassWord
	 *            ???????????,4???
	 * @return ??? :0, ???:-1
	 */
	public final int readTag(byte btReadId, byte btMemBank, byte btWordAdd,
							 byte btWordCnt, byte[] btAryPassWord) {
		byte btCmd = CMD.READ_TAG;
		byte[] btAryData = null;
		if (btAryPassWord == null || btAryPassWord.length < 4) {
			btAryPassWord = null;
			btAryData = new byte[3];
		} else {
			btAryData = new byte[3 + 4];
		}

		btAryData[0] = btMemBank;
		btAryData[1] = btWordAdd;
		btAryData[2] = btWordCnt;

		if (btAryPassWord != null) {
			System.arraycopy(btAryPassWord, 0, btAryData, 3,
					btAryPassWord.length);
		}

		int nResult = sendMessage(btReadId, btCmd, btAryData);

		return nResult;
	}

	/**
	 * д?????
	 *
	 * @param btReadId
	 *            ??д?????(0xFF??????)
	 * @param btAryPassWord
	 *            ???????????,4???
	 * @param btMemBank
	 *            ?????????(0x00:RESERVED, 0x01:EPC, 0x02:TID, 0x03:USER)
	 * @param btWordAdd
	 *            ????????,WORD(16 bits)???. д??EPC??????????0x02???,???????????????PC+CRC
	 * @param btWordCnt
	 *            WORD(16 bits)????,?????ο???????
	 * @param btAryData
	 *            д???????, btWordCnt*2 ???
	 * @return ??? :0, ???:-1
	 */
	public final int writeTag(byte btReadId, byte[] btAryPassWord,
							  byte btMemBank, byte btWordAdd, byte btWordCnt, byte[] btAryData) {
		byte btCmd = CMD.WRITE_TAG;
		byte[] btAryBuffer = new byte[btAryData.length + 7];

		System.arraycopy(btAryPassWord, 0, btAryBuffer, 0, btAryPassWord.length);
		// btAryPassWord.CopyTo(btAryBuffer, 0);
		btAryBuffer[4] = btMemBank;
		btAryBuffer[5] = btWordAdd;
		btAryBuffer[6] = btWordCnt;
		System.arraycopy(btAryData, 0, btAryBuffer, 7, btAryData.length);
		// btAryData.CopyTo(btAryBuffer, 7);

		int nResult = sendMessage(btReadId, btCmd, btAryBuffer);

		return nResult;
	}

	/**
	 * ?????????
	 *
	 * @param btReadId
	 *            ??д?????(0xFF??????)
	 * @param btAryPassWord
	 *            ???????????,4???
	 * @param btMemBank
	 * @param btLockType
	 *            ??????????(0x00:????, 0x01:????, 0x02:???????, 0x03:????????)
	 * @return ??? :0, ???:-1
	 */
	public final int lockTag(byte btReadId, byte[] btAryPassWord,
							 byte btMemBank, byte btLockType) {
		byte btCmd = CMD.LOCK_TAG;
		byte[] btAryData = new byte[6];

		System.arraycopy(btAryPassWord, 0, btAryData, 0, btAryPassWord.length);
		// btAryPassWord.CopyTo(btAryData, 0);
		btAryData[4] = btMemBank;
		btAryData[5] = btLockType;

		int nResult = sendMessage(btReadId, btCmd, btAryData);

		return nResult;
	}

	/**
	 * ???????
	 *
	 * @param btReadId
	 *            ??д?????(0xFF??????)
	 * @param btAryPassWord
	 *            ???????????,4???
	 * @return ??? :0, ???:-1
	 */
	public final int killTag(byte btReadId, byte[] btAryPassWord) {
		byte btCmd = CMD.KILL_TAG;
		byte[] btAryData = new byte[4];

		System.arraycopy(btAryPassWord, 0, btAryData, 0, btAryPassWord.length);
		// btAryPassWord.CopyTo(btAryData, 0);

		int nResult = sendMessage(btReadId, btCmd, btAryData);

		return nResult;
	}

	/**
	 * ???ACCESS??????EPC??(???????Ч?????????????)??
	 *
	 * @param btReadId
	 *            ??д?????(0xFF??????)
	 * @param btEpcLen
	 *            EPC????
	 * @param btAryEpc
	 *            EPC??, ??EpcLen????????
	 * @return ??? :0, ???:-1
	 */
	public final int setAccessEpcMatch(byte btReadId, byte btEpcLen,
									   byte[] btAryEpc) {
		byte btCmd = CMD.SET_ACCESS_EPC_MATCH;
		int nLen = (btEpcLen & 0xFF) + 2;
		byte[] btAryData = new byte[nLen];

		btAryData[0] = 0x00;
		btAryData[1] = btEpcLen;
		System.arraycopy(btAryEpc, 0, btAryData, 2, btAryEpc.length);
		// btAryEpc.CopyTo(btAryData, 2);

		int nResult = sendMessage(btReadId, btCmd, btAryData);

		return nResult;
	}

	/**
	 * ???EPC???
	 *
	 * @param btReadId
	 *            ??д?????(0xFF??????)
	 * @return ??? :0, ???:-1
	 */
	public final int cancelAccessEpcMatch(byte btReadId) {
		byte btCmd = CMD.SET_ACCESS_EPC_MATCH;
		byte[] btAryData = new byte[1];
		btAryData[0] = 0x01;

		int nResult = sendMessage(btReadId, btCmd, btAryData);

		return nResult;
	}

	/**
	 * ???????EPC????
	 *
	 * @param btReadId
	 *            ??д?????(0xFF??????)
	 * @return ??? :0, ???:-1
	 */
	public final int getAccessEpcMatch(byte btReadId) {
		byte btCmd = CMD.GET_ACCESS_EPC_MATCH;

		int nResult = sendMessage(btReadId, btCmd);

		return nResult;
	}

	/**
	 * ?????(????????????)?? <br>
	 * ??? <br>
	 * ???????????CPU???????CPU??????????????CPU????????????????????????????У???????????????
	 * ??????????????????д????????Ч???
	 *
	 * @param btReadId
	 *            ??д?????(0xFF??????)
	 * @param btRepeat
	 *            ??????????????,Repeat=0xFF??????????????????.
	 *            ????????????????????,??????????????30-50mS. ??????????????????????????????????????
	 * @return ??? :0, ???:-1
	 */
	public final int realTimeInventory(byte btReadId, byte btRepeat) {
		byte btCmd = CMD.REAL_TIME_INVENTORY;
		byte[] btAryData = new byte[1];

		btAryData[0] = btRepeat;

		int nResult = sendMessage(btReadId, btCmd, btAryData);

		return nResult;
	}

	/**
	 * ????????????????????? <br>
	 * ??? <br>
	 * ???????????CPU???????CPU??????????????CPU????????????????????????????У???????????????
	 * ??????????????????д????????Ч??? <br>
	 * ???????????????????Ч?????CmdCode_real_time_inventory??????
	 *
	 * @param btReadId
	 *            ??д?????(0xFF??????)
	 * @param btA
	 *            ?????????????(00?C03), ???????????????????
	 * @param btStayA
	 *            ???????????????
	 * @param btB
	 *            ??????????????(00?C03), ???????????????????
	 * @param btStayB
	 *            ???????????????
	 * @param btC
	 *            ???????????????(00?C03), ???????????????????
	 * @param btStayC
	 *            ???????????????
	 * @param btD
	 *            ??????????????(00?C03), ???????????????????
	 * @param btStayD
	 *            ???????????????
	 * @param btInterval
	 *            ????????????. ??λ??mS. ????????????,????????
	 * @param btRepeat
	 *            ????????????л???????
	 * @return ??? :0, ???:-1
	 */
	public final int fastSwitchAntInventory(byte btReadId, byte btA,
											byte btStayA, byte btB, byte btStayB, byte btC, byte btStayC,
											byte btD, byte btStayD, byte btInterval, byte btRepeat) {

		byte btCmd = CMD.FAST_SWITCH_ANT_INVENTORY;
		byte[] btAryData = new byte[10];

		btAryData[0] = btA;
		btAryData[1] = btStayA;
		btAryData[2] = btB;
		btAryData[3] = btStayB;
		btAryData[4] = btC;
		btAryData[5] = btStayC;
		btAryData[6] = btD;
		btAryData[7] = btStayD;
		btAryData[8] = btInterval;
		btAryData[9] = btRepeat;

		int nResult = sendMessage(btReadId, btCmd, btAryData);

		return nResult;
	}
	/**
	 * ?????session??target??档
	 *
	 * @param btReadId
	 *            ??д?????(0xFF??????)
	 * @param btSession
	 *            ???????session
	 * @param btTarget
	 *            ???????Inventoried Flag(0x00:A, 0x01:B)
	 * @param btRepeat
	 *            ??????????????
	 * @return ??? :0, ???:-1
	 */
	public final int customizedSessionTargetInventory(byte btReadId,
													  byte btSession, byte btTarget, byte btRepeat) {

		byte btCmd = CMD.CUSTOMIZED_SESSION_TARGET_INVENTORY;
		byte[] btAryData = new byte[3];

		btAryData[0] = btSession;
		btAryData[1] = btTarget;
		btAryData[2] = btRepeat;

		int nResult = sendMessage(btReadId, btCmd, btAryData);

		return nResult;
	}

	/**
	 * ?????????????????档 <br>
	 * ??? <br>
	 * ??????????????е???????????????????????? <br>
	 * ???????????CmdCode_inventory ??????????????????????档 <br>
	 * ?????????????????18000-6C?????????е????????????
	 *
	 * @param btReadId
	 *            ??д?????(0xFF??????)
	 * @return ??? :0, ???:-1
	 */
	public final int getInventoryBuffer(byte btReadId) {
		byte btCmd = CMD.GET_INVENTORY_BUFFER;

		int nResult = sendMessage(btReadId, btCmd);

		return nResult;
	}

	/**
	 * ????????????????????
	 *
	 * @param btReadId
	 *            ??д?????(0xFF??????)
	 * @return ??? :0, ???:-1
	 */
	public final int getAndResetInventoryBuffer(byte btReadId) {
		byte btCmd = CMD.GET_AND_RESET_INVENTORY_BUFFER;

		int nResult = sendMessage(btReadId, btCmd);

		return nResult;
	}

	/**
	 * ?????????????????????
	 *
	 * @param btReadId
	 *            ??д?????(0xFF??????)
	 * @return ??? :0, ???:-1
	 */
	public final int getInventoryBufferTagCount(byte btReadId) {
		byte btCmd = CMD.GET_INVENTORY_BUFFER_TAG_COUNT;

		int nResult = sendMessage(btReadId, btCmd);

		return nResult;
	}

	/**
	 * ???????????档
	 *
	 * @param btReadId
	 *            ??д?????(0xFF??????)
	 * @return ??? :0, ???:-1
	 */
	public final int resetInventoryBuffer(byte btReadId) {
		byte btCmd = CMD.RESET_INVENTORY_BUFFER;

		int nResult = sendMessage(btReadId, btCmd);

		return nResult;
	}

	/**
	 * ???????????
	 *
	 * @param btAryBuf
	 * @return ??? :0, ???:-1
	 */
	public final int sendBuffer(byte[] btAryBuf) {

		int nResult = sendMessage(btAryBuf);

		return nResult;
	}
}
